snippets:
- title: |
    This example is contrived in order to demonstrate what Haskell
    looks like, including: (1) where syntax, (2) enumeration syntax,
    (3) pattern matching, (4) consing as an operator, (5) list
    comprehensions, (6) infix functions. Don't take it seriously as an
    efficient prime number generator.
  code: |
    primes = filterPrime [2..]
      where filterPrime (p:xs) =
              p : filterPrime [x | x <- xs, x `mod` p /= 0]
- title: |
    Because every language has fib.
  code: |
    fib 0 = 0
    fib 1 = 1
    fib n = fib (n-1) + fib (n-2)
